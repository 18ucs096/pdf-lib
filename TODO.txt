# Features
* Support stream decompression for non FlateEncoded streams
* Add in "early stops" to parsers (like checking if first char is a "<", for hex strings) to avoid excessive work.
* Use "Length" dict entry when parsing streams
* (Maybe) Speed up parser by created a function that looks at the next input character to guess what PDF Object is next in the input bytes. (Will need to be able to access xref table because "Length" entries can be indirect references)
* Avoid parsing dicts twice (in case of parsing for stream before dict)
* Add credits file for the testing PDFs!
* Use XRef tables to parse the file on the fly instead of brute-force parsing it all in one go

# Tests:
* Make test for dictionaries like:
  '<</Matrix [1 0 0 1 0 0]/Length 96/Resources<</ProcSet [/PDF /Text /ImageB /ImageC /ImageI]/Font<</ArialMT 2 0 R>>>>/Filter/FlateDecode/BBox[0 0 30.33 9.36]/Type/XObject/Subtype/Form/FormType 1>>'
* Make tests for names like:
  '/ModDate(D:20170322102501-05'00')'
* Make test for booleans like:
  ' true>>/Metadata 147 0 R>>'
* Make sure parsed streams don't include the leading/trailing EOL markers
* Make sure xref tables with multiple EOL chars can be parsed:
  '0 851\r\n0000000000 65535 f\r\n0000229614 00000 n\r\n0000229916 00000 n\r\n0000230276 00000 n\r\n0000239589 00000 n\r\n0000260433 00000 n\r\n0000260685 00000 n\r\n0000261106 00000 n\r\n0000261398 00000 n\r\n0000261443 00000 n\r\n0000268136 00000 n\r\n0000268451 00000 n\r\n0000268766 00000 n\r\n0000269022 00000 n\r\n0000269283 00000 n\r\n0000269565 00000 n\r\n0000269845 00000 n\r\n0000270123 00000 n\r\n'
* Make sure parseName can handle names consisting of single forward slash:
  '/ /AS /Off /FT /Btn /Type /Annot >>'...

# Bugs
* Figure out why the "2 0 R" object reference fails to be resolved in bol2.pdf
* Look into why pdfDoc.toBytes().length and pdfDoc.toBytesEfficient().length are different sizes... (some of this code was removed in commit: c508f73103021317580b641a6f895737e4e6e1b5)
* Update "parseTrailer" to handle files w/o "xref" and "trailer" keywords, as they are _not_ malformatted, but are to be expected in 1.5+ PDFs
* Maybe remove the "validKeys" stuff from PDFDictionaries?
* Make sure PDFDocument validates existence of its catalog
* Clean up "parseDocument" function
* Adding "TESTING" (using following non-embedded font) to "/Users/user/Desktop/pdf-lib/test-pdfs/pdf/ef/inst/ef_ins_1040.pdf"
  messes up the text within the "Caution" sections:
  ```
  pageFont.set(
    'F1',
    PDFDictionary.from({
      Type: PDFName.from('Font'),
      Subtype: PDFName.from('Type1'),
      BaseFont: PDFName.from('Times-Roman'),
    }),
  );
  ```
