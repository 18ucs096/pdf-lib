Before 0.1.0 release:
* Add some unit and integration tests
* Document the current (low-level) API in a simple README
* Write some scripts/commands to handle the code building and release process.
* Add LICENSE!!!

# Features
***** Create static "cm" members for operations like scaling, and translating *****
***** Export image dimensions from PNG and JPEG image factories *****
***** Add feature to bypass validations in prod builds! *****
***** Validate locations of text objects and operators! *****
***** Figure out how to publish flow types in NPM package *****
***** Make note of the dependency on "fontkit" and "unicode-properties" forks and suggest desire for better solution ****
***** Encode characters passed to "Tj" as code point hex codes, not string literals *****
***** Add credits for PNGImage and JPEGImage and font embedding *****
***** Consider forking png-js to avoid "Buffer" dependency *****

***** Remove index.js files from fork repos and publish to NPM *****
***** Update READMEs of fork repos with credits and workaround using browserify command *****

* Support stream decompression for non FlateEncoded streams
* Add in "early stops" to parsers (like checking if first char is a "<", for hex strings) to avoid excessive work.
* Use "Length" dict entry when parsing streams
* (Maybe) Speed up parser by created a function that looks at the next input character to guess what PDF Object is next in the input bytes. (Will need to be able to access xref table because "Length" entries can be indirect references)
* Avoid parsing dicts twice (in case of parsing for stream before dict)
* Add credits file for the testing PDFs!
* Use XRef tables to parse the file on the fly instead of brute-force parsing it all in one go
* Set validation limits on pdf operator classes
* Create PDFRectangle structure!
* Remove all old dereference-reliant code...
* Make "lookup" type
* Support creation of PDFs as opposed to editing them
* Support annotations & links
* Support Acroform manipulation
* Support document outlines

# Tests:
* Make sure xref tables with multiple EOL chars can be parsed:
  '0 851\r\n0000000000 65535 f\r\n0000229614 00000 n\r\n0000229916 00000 n\r\n0000230276 00000 n\r\n0000239589 00000 n\r\n0000260433 00000 n\r\n0000260685 00000 n\r\n0000261106 00000 n\r\n0000261398 00000 n\r\n0000261443 00000 n\r\n0000268136 00000 n\r\n0000268451 00000 n\r\n0000268766 00000 n\r\n0000269022 00000 n\r\n0000269283 00000 n\r\n0000269565 00000 n\r\n0000269845 00000 n\r\n0000270123 00000 n\r\n'

# Bugs
* Figure out why the "2 0 R" object reference fails to be resolved in bol2.pdf
* Look into why pdfDoc.toBytes().length and pdfDoc.toBytesEfficient().length are different sizes... (some of this code was removed in commit: c508f73103021317580b641a6f895737e4e6e1b5)
* Update "parseTrailer" to handle files w/o "xref" and "trailer" keywords, as they are _not_ malformatted, but are to be expected in 1.5+ PDFs
* Maybe remove the "validKeys" stuff from PDFDictionaries?
* Make sure PDFDocument validates existence of its catalog
* Clean up "parseDocument" function
* Adding "TESTING" (using following non-embedded font) to "/Users/user/Desktop/pdf-lib/test-pdfs/pdf/ef/inst/ef_ins_1040.pdf"
  messes up the text within the "Caution" sections:
  ```
  pageFont.set(
    'F1',
    PDFDictionary.from({
      Type: PDFName.from('Font'),
      Subtype: PDFName.from('Type1'),
      BaseFont: PDFName.from('Times-Roman'),
    }),
  );
  ```
* !!When parsing PDFs with update sections, I don't think the PDFDocumentFactory.normalize function will respect object deletions, as it simply picks up the most recent version of each object...!!
